 // function renderTemplate(no, surahInEnglish, verse, surahInArabic) {
    //     return (
    //     <TouchableOpacity onPress={() => navigation.navigate('QuranDetails', {id:no})}>
    //         <View style={style.container}>
    //                 <View style={{justifyContent: 'center'}}>
    //                     <ImageBackground source={require('../assets/icons/verse_indicator.png')} resizeMode='contain'
    //                         style={{width: 50, height: 50, flex: 1, justifyContent: 'center', alignItems: 'center'}}
    //                     >
    //                         <AppText _style={{fontSize: 20}}>{no}</AppText>
    //                     </ImageBackground>

    //                 </View>
    //                 <View style={{flexBasis: 150}}>
    //                     <AppText _style={{fontSize: 20, fontWeight: 'bold'}}>{surahInEnglish}</AppText>
    //                     <AppText>{verse} - VERSES</AppText>
    //                 </View>
    //                 <View style={{flexBasis: '30%', alignItems: 'flex-end'}}>
    //                     <AppText>{surahInArabic}</AppText>
    //                 </View>
    //             </View>
    //     </TouchableOpacity>
    //     )
    // }



    async function playMusic(id) {
        const quranId = route.params.id

        const ids = `${formatNumber(quranId)}${formatNumber(id)}`

        const reciterInfo = getReciterInfo(currentReciter);

        const uri = PREFIX + reciterInfo.name + reciterInfo.suffix + ids + '.mp3'

        const uriDevice = FileSystem.documentDirectory+currentReciter+'/'+ids+'.mp3'        
        

        if(isPlaying) {
            setPlay(false)
            changeIcon(id)
        }

        if(!isPlaying)
        {
            setPlay(true)
            changeIcon(id)
            console.log('enter this phases')
            FileSystem.getInfoAsync(FileSystem.documentDirectory+currentReciter, {encoding: FileSystem.EncodingType.Base64})
                .then( async (data) => {
                    if(!data.exists) 
                    {
                            initiateSound(uri)
                            const creationResult =  await createReciterDirectory(currentReciter)
                            if(creationResult) {
                                await storeQuranReciter(ids, currentReciter,uri)
                            }
                            return;
                        }
                        
                    const result = await FileSystem.getInfoAsync(FileSystem.documentDirectory+currentReciter+'/'+ids + '.mp3')
                        
                    if(!result.exists) {
                    initiateSound(uri)
                        console.log('enter')
                        await storeQuranReciter(ids, currentReciter,uri)
                        return;
                }

                initiateSound(uriDevice);
                console.log('enter device')
                return;
                })
                .catch((err) => console.log('err' + err))
            }

           
            
    }


        async function createReciterDirectory(currentReciter) {

        const result = await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory+currentReciter+'/')

        if(result) return true
    }


    async function storeQuranReciter(uniqueName, currentReciter, uri) {
        
        FileSystem.downloadAsync(uri, FileSystem.documentDirectory+currentReciter+'/'+ uniqueName + '.mp3')
            .then(({uri}) => console.log('finish download' + uri))
            .catch((err)=> console.log("error downloading" + err))
    }


     async function initiateSound(uri) {
        const { sound: playbackObject } = await Audio.Sound.createAsync(
              { uri },
              { shouldPlay: true }
        );
        playbackObject.setOnPlaybackStatusUpdate(onPlayBackStatusUpdate)

        function onPlayBackStatusUpdate(playBackStatus) {
            if(playBackStatus.didJustFinish) {   
                setPlay(false)
                changeIcon(selectedItem)      
                let curr = currentVerse
                curr++
                setCurrentVerse(curr)
                playbackObject.unloadAsync()
                playMusic(curr)  
                console.log(currentVerse)      
            }
        } 
    
    }


        




















// export default function AppQuranDetails({route, navigation}) {

//     // const [getVerse, setVerse] = useState([])
//     const [currentReciter, setReciter] = useState('AbdulSamad')
//     // const [quranId, setQuranId] = useState(0)
//     // const [isPlaying, setPlay] = useState(true)

//     // const [currentVerse, setCurrentVerse] = useState(1);
//     // const [objectPlayBack, setObjectPlayBack] = useState({})

//     function getSurahVerse() {

//         // const result = _fullQuran(route.params.id)

//         // if(result) {
//         //     setVerse(result)
//         // }
//     }

//     const PREFIX = 'http://www.everyayah.com/data/'
//     const suffix = '_64kbps_QuranExplorer.Com'

//     function formatNumber(number) {
//         const num = number.toString()     
//         const result = num.length % 3
//         if(result !== 0){
//         const arr = Array(3 - result).fill('0')
        
//         arr.push(number)
        
//         return arr.join('')
//         }
//         return num;
//     }

//     useEffect(() => {
        
//         return () => {
//             // objectPlayBack.unloadAsync()
//         }
//     }, [])

//     //load every path to the reciter voic


    async function createReciterDirectory(currentReciter) {

        const result = await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory+currentReciter+'/')

        if(result) return true
    }

    // async function storeQuranReciter(uniqueName, currentReciter, uri) {
        
    //     FileSystem.downloadAsync(uri, FileSystem.documentDirectory+currentReciter+'/'+ uniqueName + '.mp3')
    //         .then(({uri}) => console.log('finish download' + uri))
    //         .catch((err)=> console.log("error downloading" + err))
    // }

//     function getReciterInfo(_name) {
//         // return reciter.find((name) => name.name === _name)
//     }

//     async function playMusic(id) {
//         // setQuranId(route.params.id)

//         // const ids = `${formatNumber(quranId)}${formatNumber(id)}`

//         // const reciterInfo = getReciterInfo(currentReciter);

//         // const uri = PREFIX + reciterInfo.name + reciterInfo.suffix + ids + '.mp3'

//         // const uriDevice = FileSystem.documentDirectory+currentReciter+'/'+ids+'.mp3'        


//         // FileSystem.getInfoAsync(FileSystem.documentDirectory+currentReciter, {encoding: FileSystem.EncodingType.Base64})
//         //     .then( async (data) => {
//         //         if(!data.exists) 
//         //         {
//         //                 initiateSound(uri)
//         //                 const creationResult =  await createReciterDirectory(currentReciter)
//         //                 if(creationResult) {
//         //                     await storeQuranReciter(ids, currentReciter,uri)
//         //                 }
//         //                 return;
//         //             }
                    
//         //         const result = await FileSystem.getInfoAsync(FileSystem.documentDirectory+currentReciter+'/'+ids + '.mp3')
                    
//         //         if(!result.exists) {
//         //            initiateSound(uri)
//         //             await storeQuranReciter(ids, currentReciter,uri)
//         //             return;
//         //        }

//         //        initiateSound(uriDevice);
//         //     })
//         //     .catch((err) => console.log('err' + err))
            
//     }

//         async function initiateSound(uri) {
                 
//             // const { sound: playbackObject } = await Audio.Sound.createAsync(
//             //     { uri},
//             //     { shouldPlay: isPlaying }
//             //   );

//             //   setObjectPlayBack(playbackObject)

//             // objectPlayBack.setOnPlaybackStatusUpdate(onPlayBackStatusUpdate)
//         }
                

//         function onPlayBackStatusUpdate(playBackStatus) {
//             // if(playBackStatus.didJustFinish) {
//             //     setCurrentVerse(currentVerse + 1)
//             //     playMusic(currentVerse)
//             //     console.log(currentVerse)
//             // }
//             // if(playBackStatus.isPlaying) {
        
//             // }
//         } 
    

//     const [defaultSize, reset] = useState([28, 18])

//     return (
//         <SafeViewScreen >
//             <FlatList
//                 data={''}
//                 // getItemCount={() => getVerse.total_verses}
//                 // getItem={(data, index) => ({
//                 //     id: data[index].id,
//                 //     text: data[index].text,
//                 //     translation: data[index].translation,
//                 //     transliteration: data[index].transliteration
//                 // })}

//                 keyExtractor={(item) => item.id}
//                 renderItem={({item}) => 
//                 <RenderVerse onPress={() => playMusic(item.id)} id={item.id} fontSize={defaultSize} content={item.text} transliteration={item.transliteration} english={item.translation} />
//                 //   renderVerse(item.id, item.text, item.translation, item.transliteration)  
//                 }
//                 ItemSeparatorComponent={() => 
//                     <View style={{flex: 1, backgroundColor: '#70707020', width: '100%', height:2}}></View>
//                 }

//                 ListHeaderComponent={() => (
//                     <View>
//                         <AppText _style={{textAlign: 'center', fontSize: 22, marginBottom: -5}}>{}</AppText>
//                         <View style={{flexDirection: 'row', justifyContent: 'space-between', padding: 10, alignItems: 'center'}}>
//                             <TouchableOpacity onPress={() => navigation.goBack()}>{icons.back}</TouchableOpacity>
//                             <View style=
//                                     {{backgroundColor: colors.tertiaryColor, 
//                                     flexBasis: '85%', alignItems: 'center',
//                                     paddingVertical: 10
//                                     }}>
//                                 <Image source={require('../assets/icons/bismillah.png')} resizeMode='contain' style={{width: '80%', height: 45}}/>
//                             </View>
//                         </View>
//                         <AppPicker placeholder={''} data={''}
//                             property='name'
//                             onSelectItem={(item) => setReciter(item.name)}
//                             numOfColumn={1}
//                             text={{fontSize: 15, color: '#fff', paddingLeft: 10}}
//                             wrapperStyle={{width: '45%', height: 40, alignItems: 'flex-end', marginRight: 10}} 
//                             _style={{padding: 0, width: '100%', height: '80%', backgroundColor: colors.primaryColor}}
//                             />
//                     </View>
//                 )}
//             />

//         </SafeViewScreen>
//     )

// }

// const style = StyleSheet.create({
//     container : {
//         padding: 20,
//         flexDirection: 'row',
//         justifyContent: 'space-between'
//     },

//     arabic: {
//         flexDirection: 'row-reverse',
//         // alignItems: 'flex-end',

//     }
//         // justifyContent: 'flex-end'
        
// })